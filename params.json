{"name":"Wallboard","tagline":"Real-time dashboards for everyone","body":"Wallboard\r\n=========\r\n\r\nReal-time dashboards for everyone\r\n\r\nWallboard is a simple data store and presenting system\r\n\r\n\r\n### Requirements\r\n* Mongodb\r\n* Nodejs\r\n\r\n\r\n## Sending data to Wallboard\r\nHow to push updates to Wallboard\r\n### Linux command line\r\n```Shell\r\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"stream_name\":\"element1\",\"value\":\"4\"}' https://yourserver/send\r\n```\r\n\r\n\r\n### Python\r\n```Python\r\nimport urllib2\r\nimport json\r\n\r\nwallboard_url = 'https://yourserver/send'\r\ndata = json.dumps({\"stream_name\":\"element1\",\"value\":5})\r\nrequest = urllib2.Request(wallboard_url, data, {'Content-Type': 'application/json', 'Content-Length':len(data)})\r\nresponse = urllib2.urlopen(request)\r\n```\r\n\r\n### PowerShell\r\n```PowerShell\r\nInvoke-WebRequest -Uri https://yourserver/send -Method POST -ContentType 'application/json;' -Body ([System.Text.Encoding]::UTF8.GetBytes('{\"stream_name\":\"element1\",\"value\":\"Árvíztûrõtükörfúrógép\"}'))\r\n```\r\n\r\n\r\n# How to create your own widgets\r\nCreate the following files in `/public/elements` (change widget to the name of your new widget)\r\n* widget.config.json\r\n* widget.html\r\n* widget.png\r\nAnd edit the `elements/widget_list.json` file to include your widget \r\n\r\n### widget.config.json\r\nIt is a JSON file that describes the configuration page of your widget\r\n\r\n* `name`: id of the configuration item (you can reference this id in the template html)\r\n* `display_name`:  Name of the configuration item that shows in the Configure widget dialog\r\n* `description`: \r\n* `type`: The type of the input, that can be:\r\n  * `stream_selector`: Dropdown list of available streams and search as you type \r\n  * `text`: simple html text input\r\n  * `color_chooser`: color picker\r\n  * `checkbox`: checkbox\r\n  * `icon_picker`: icon picker with Bootstrap and Font Awesome icons\r\n  * `divider`: divider bar\r\n\r\n#### sample\r\n```JSON\r\n [\r\n    {\r\n      \"name\":\"stream_name\",\r\n      \"diplay_name\":\"Stream name\",\r\n      \"description\":\"Please specify the stream name\",\r\n      \"type\":\"stream_selector\"\r\n    },\r\n    {\r\n      \"name\":\"progress_color\",\r\n      \"display_name\":\"Progress Color\",\r\n      \"description\":\"Color of progressbar\",\r\n      \"type\":\"color_chooser\",\r\n      \"value\":\"#50e84b\"\r\n    },    \r\n    {\r\n      \"name\":\"min_value\",\r\n      \"diplay_name\":\"Minimum value\",\r\n      \"description\":\"\",\r\n      \"type\":\"text\",\r\n      \"value\":0\r\n    },\r\n    {\r\n      \"name\":\"max_value\",\r\n      \"diplay_name\":\"Maximum value\",\r\n      \"description\":\"\",\r\n      \"type\":\"text\",\r\n      \"value\":100\r\n    },\r\n   {\r\n    \"name\":\"background_color\",\r\n    \"display_name\":\"Background color\",\r\n    \"description\":\"Color of the tile's background\",\r\n    \"type\":\"color_chooser\",\r\n    \"value\":\"#000000\"\r\n  }\r\n  ]\r\n```\r\n\r\n#### widget.html\r\nThis html fragment will be included in a dashboard with the [ng-include](https://docs.angularjs.org/api/ng/directive/ngInclude) directive by angular\r\n\r\nDesign your layout to adapt any widget sizes (like tall, wide, small, big)\r\n\r\nUse the {{data.value}} to reference the current value of the stream like this \r\n`<h1>The current value of the stream is {{data.value}}</h1>`\r\n\r\nUse the data.template_config.variable to access the configuration variable (from the config.json)\r\nfor example:\r\n```\r\n<p ng-style='{\"font-size\": data.template_config.text_size + \"vw\",\"color\":data.template_config.text_color}'>\r\n    {{data.value}}\r\n</p>\r\n```\r\n\r\n#### widget.png\r\nScreenshot of your widget that shows on the widget selector screen 150x150 pixels\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}